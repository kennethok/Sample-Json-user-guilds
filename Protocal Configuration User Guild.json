Protocol configuration. 

As a first step, a new protocol instance needs to be configured. It is a very basic configuration conforming with rfc4271.

Url: /restconf/config/openconfig-network-instance:network-instances/network-instance/global-bgp/openconfig-network-instance:protocols

Method: post

Content-type: application/xml

Request body:

{
	"protocol": {
		"name": "bgp-example",
		"identifier": {
			"_xmlns:x": "http://openconfig.net/yang/policy-types",
			"__text": "x:BGP"
		},
		"bgp": {
			"global": {
				"config": {
					"router-id": "192.0.2.2",
					"as": "65000"
				}
			},
			"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
		},
		"_xmlns": "http://openconfig.net/yang/network-instance"
	}
}

@line 2: The unique protocol instance identifier.

@line 7: BGP Identifier of the speaker.

@line 8: Local autonomous system number of the speaker. Note that, OpenDaylight BGP implementation supports four-octet AS numbers only.



The new instance presence can be verified via REST:

URL: /restconf/operational/bgp-rib:bgp-rib/rib/bgp-example

Method: GET

Response Body:

{
	"rib": {
		"id": "bgp-example",
		"loc-rib": {
			"tables": {
				"afi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:ipv4-address-family"
				},
				"safi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:unicast-subsequent-address-family"
				},
				"ipv4-routes": {
					"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
				},
				"attributes": {
					"uptodate": "true"
				}
			}
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-rib"
	}
}


BGP Peering
To exchange routing information between two BGP systems (peers), it is required to configure a peering on both BGP speakers first. This mean that each BGP speaker has a white list of neighbors, representing remote peers, with which the peering is allowed. The TCP connection is established between two peers and they exchange messages to open and confirm the connection parameters followed by routes exchange.

Here is a sample basic neighbor configuration:

URL: /restconf/config/openconfig-network-instance:network-instances/network-instance/global-bgp/openconfig-network-instance:protocols/protocol/openconfig-policy-types:BGP/bgp-example/bgp/neighbors


{
	"neighbor": {
		"neighbor-address": "192.0.2.1",
		"timers": {
			"config": {
				"hold-time": "90",
				"connect-retry": "10"
			}
		},
		"transport": {
			"config": {
				"remote-port": "179",
				"passive-mode": "false"
			}
		},
		"config": {
			"peer-type": "INTERNAL"
		},
		"afi-safis": "...",
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
	}
}

@line 2: IP address of the remote BGP peer. Also serves as an unique identifier of a neighbor in a list of neighbors.

@line 5: Proposed number of seconds for value of the Hold Timer. Default value is 90.

@line 6: Time interval in seconds between attempts to establish session with the peer. Effective in active mode only. Default value is 30.

@line 11: Remote port number to which the local BGP is connecting. Effective in active mode only. Default value 179.

@line 12: Wait for peers to issue requests to open a BGP session, rather than initiating sessions from the local router. Default value is false.

@line 16: Explicitly designate the peer as internal or external. Default value is INTERNAL.

@line 18: Enable families.


Once the remote peer is connected and it advertised routes to local BGP system, routes are stored in peer’s RIBs. The RIBs can be checked via REST:

URL: /restconf/operational/bgp-rib:bgp-rib/rib/bgp-example/peer/bgp:%2F%2F192.0.2.1

Method: GET

Request Body:

{
	"peer": {
		"peer-id": "bgp://192.0.2.1",
		"supported-tables": {
			"afi": {
				"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
				"__text": "x:ipv4-address-family"
			},
			"safi": {
				"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
				"__text": "x:unicast-subsequent-address-family"
			}
		},
		"peer-role": "ibgp",
		"adj-rib-in": {
			"tables": {
				"afi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:ipv4-address-family"
				},
				"safi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:unicast-subsequent-address-family"
				},
				"ipv4-routes": {
					"ipv4-route": {
						"path-id": "0",
						"prefix": "10.0.0.10/32",
						"attributes": {
							"as-path": "",
							"origin": {
								"value": "igp"
							},
							"local-pref": {
								"pref": "100"
							},
							"ipv4-next-hop": {
								"global": "10.10.1.1"
							}
						}
					},
					"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
				},
				"attributes": {
					"uptodate": "true"
				}
			}
		},
		"effective-rib-in": {
			"tables": {
				"afi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:ipv4-address-family"
				},
				"safi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:unicast-subsequent-address-family"
				},
				"ipv4-routes": {
					"ipv4-route": {
						"path-id": "0",
						"prefix": "10.0.0.10/32",
						"attributes": {
							"as-path": "",
							"origin": {
								"value": "igp"
							},
							"local-pref": {
								"pref": "100"
							},
							"ipv4-next-hop": {
								"global": "10.10.1.1"
							}
						}
					},
					"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
				},
				"attributes": {
					"uptodate": "true"
				}
			}
		},
		"adj-rib-out": {
			"tables": {
				"afi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:ipv4-address-family"
				},
				"safi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:unicast-subsequent-address-family"
				},
				"ipv4-routes": {
					"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
				},
				"attributes": ""
			}
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-rib"
	}
}

@line 8: Adj-RIB-In - Per-peer RIB, which contains unprocessed routes that has been advertised to local BGP speaker by the remote peer.

@line 13: Here is the reported route with destination 10.0.0.10/32 in Adj-RIB-In.

@line 35: Effective-RIB-In - Per-peer RIB, which contains processed routes as a result of applying inbound policy to Adj-RIB-In routes.

@line 40: Here is the reported route with destination 10.0.0.10/32, same as in Adj-RIB-In, as it was not touched by import policy.

@line 62: Adj-RIB-Out - Per-peer RIB, which contains routes for advertisement to the peer by means of the local speaker’s UPDATE message.

@line 66: The peer’s Adj-RIB-Out is empty as there are no routes to be advertise from local BGP speaker.



Also the same route should appeared in Loc-RIB now:

URL: /restconf/operational/bgp-rib:bgp-rib/rib/bgp-example/loc-rib/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/ipv4-routes

Method: GET


{
	"ipv4-routes": {
		"ipv4-route": {
			"path-id": "0",
			"prefix": "10.0.0.10/32",
			"attributes": {
				"as-path": "",
				"origin": {
					"value": "igp"
				},
				"local-pref": {
					"pref": "100"
				},
				"ipv4-next-hop": {
					"global": "10.10.1.1"
				}
			}
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
	}
}

@line 4: Destination - IPv4 Prefix Address.

@line 6: AS_PATH - mandatory attribute, contains a list of the autonomous system numbers through that routing information has traversed.

@line 8: ORIGIN - mandatory attribute, indicates an origin of the route - ibgp, egp, incomplete.

@line 11: LOCAL_PREF - indicates a degree of preference for external routes, higher value is preferred.

@line 14: NEXT_HOP - mandatory attribute, defines IP address of the router that should be used as the next hop to the destination.


There are much more attributes that may be carried along with the destination:

BGP-4 Path Attributes

MULTI_EXIT_DISC (MED)
Optional attribute, to be used to discriminate among multiple exit/entry points on external links, lower number is preferred


{
	"multi-exit-disc": {
		"med": "0"
	}
}

ATOMIC_AGGREGATE
Indicates whether AS_SET was excluded from AS_PATH due to routes aggregation

{
	"atomic-aggregate": ""
}

AGGREGATOR
Optional attribute, contains AS number and IP address of a BGP speaker which performed routes aggregation.

{
	"aggregator": {
		"as-number": "65000",
		"network-address": "192.0.2.2"
	}
}


Unrecognised
Optional attribute, used to store optional attributes, unrecognized by a local BGP speaker.


{
	"unrecognized-attributes": {
		"partial": "true",
		"transitive": "true",
		"type": "101",
		"value": "0101010101010101"
	}
}


Route Reflector Attributes

ORIGINATOR_ID
Optional attribute, carries BGP Identifier of the originator of the route.


{
	"originator-id": {
		"originator": "41.41.41.41"
	}
}

CLUSTER_LIST
Optional attribute, contains a list of CLUSTER_ID values representing the path that the route has traversed.

{
	"cluster-id": {
		"cluster": "40.40.40.40"
	}
}


Communities
Optional attribute, may be used for policy routing.

{
	"communities": {
		"as-number": "65000",
		"semantics": "30740"
	}
}


Extended Communities




Link Bandwidth
Carries the cost to reach external neighbor.

{
	"extended-communities": {
		"transitive": "true",
		"link-bandwidth-extended-community": {
			"bandwidth": "BH9CQAA="
		}
	}
}


AIGP
Optional attribute, carries accumulated IGP metric.

{
	"aigp": {
		"aigp-tlv": {
			"metric": "120"
		}
	}
}


External peering configuration
An example above provided configuration for internal peering only. Following configuration sample is intended for external peering:

URL: /restconf/config/openconfig-network-instance:network-instances/network-instance/global-bgp/openconfig-network-instance:protocols/protocol/openconfig-policy-types:BGP/bgp-example/bgp/neighbors

Method: POST

Content-Type: application/xml

Request Body:

{
	"neighbor": {
		"neighbor-address": "192.0.2.3",
		"config": {
			"peer-type": "EXTERNAL",
			"peer-as": "64999"
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
	}
}

@line 5: AS number of the remote peer.


Route reflector configuration
The local BGP speaker can be configured with a specific cluster ID. Following example adds the cluster ID to the existing speaker instance:

URL: /restconf/config/openconfig-network-instance:network-instances/network-instance/global-bgp/openconfig-network-instance:protocols/protocol/openconfig-policy-types:BGP/bgp-example/bgp/global/config

Method: PUT

Content-Type: application/xml

Request Body:

{
	"config": {
		"router-id": "192.0.2.2",
		"as": "65000",
		"route-reflector-cluster-id": "192.0.2.1"
	}
}

@line 4: Route-reflector cluster id to use when local router is configured as a route reflector


MD5 authentication configuration
The OpenDaylight BGP implementation is supporting TCP MD5 for authentication. Sample configuration below shows how to set authentication password for a peer:

URL: /restconf/config/openconfig-network-instance:network-instances/network-instance/global-bgp/openconfig-network-instance:protocols/protocol/openconfig-policy-types:BGP/bgp-example/bgp/neighbors

Method: POST

Content-Type: application/xml

Request Body:


{
	"neighbor": {
		"neighbor-address": "192.0.2.5",
		"config": {
			"auth-password": "topsecret"
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
	}
}


@line 4: Configures an MD5 authentication password for use with neighboring devices.

Simple Routing Policy configuration
The OpenDaylight BGP implementation is supporting Simple Routing Policy. Sample configuration below shows how to set Simple Routing Policy for a peer:

URL: /restconf/config/openconfig-network-instance:network-instances/network-instance/global-bgp/openconfig-network-instance:protocols/protocol/openconfig-policy-types:BGP/bgp-example/bgp/neighbors

Method: POST

Content-Type: application/xml

Request Body:


{
	"neighbor": {
		"neighbor-address": "192.0.2.7",
		"config": {
			"simple-routing-policy": "learn-none"
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
	}
}

@line 4: Simple Routing Policy:

learn-none - routes advertised by the peer are not propagated to Effective-RIB-In and Loc-RIB
announce-none - routes from local Loc-RIB are not advertised to the peer

Note

Existing neighbor configuration can be reconfigured (change configuration parameters) anytime. As a result, established connection is dropped, peer instance is recreated with a new configuration settings and connection re-established.

Note

The BGP configuration is persisted on OpendDaylight shutdown and restored after the re-start.

BGP Application Peer and programmable RIB
The OpenDaylight BGP implementation also supports routes injection via Application Peer. Such peer has its own programmable RIB, which can be modified by user. This concept allows user to originate new routes and advertise them to all connected peers.

Application Peer configuration
Following configuration sample show a way to configure the Application Peer:

URL: /restconf/config/openconfig-network-instance:network-instances/network-instance/global-bgp/openconfig-network-instance:protocols/protocol/openconfig-policy-types:BGP/bgp-example/bgp/neighbors

Method: POST

Content-Type: application/xml

Request Body:

{
	"neighbor": {
		"neighbor-address": "10.25.1.9",
		"config": {
			"peer-group": "application-peers"
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
	}
}


@line 2: IP address is uniquely identifying Application Peer and its programmable RIB. Address is also used in local BGP speaker decision process.

@line 4: Indicates that peer is associated with application-peers group. It serves to distinguish Application Peer’s from regular neighbors.


The Application Peer presence can be verified via REST:

URL: /restconf/operational/bgp-rib:bgp-rib/rib/bgp-example/peer/bgp:%2F%2F10.25.1.9

Method: GET

Response Body:

{
	"peer": {
		"peer-id": "bgp://10.25.1.9",
		"peer-role": "internal",
		"adj-rib-in": {
			"tables": {
				"afi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:ipv4-address-family"
				},
				"safi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:unicast-subsequent-address-family"
				},
				"ipv4-routes": {
					"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
				},
				"attributes": {
					"uptodate": "false"
				}
			}
		},
		"effective-rib-in": {
			"tables": {
				"afi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:ipv4-address-family"
				},
				"safi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:unicast-subsequent-address-family"
				},
				"ipv4-routes": {
					"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
				},
				"attributes": ""
			}
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-rib"
	}
}


@line 3: Peer role for Application Peer is internal.

@line 8: Adj-RIB-In is empty, as no routes were originated yet.

Note

There is no Adj-RIB-Out for Application Peer.

Programmable RIB
Next example shows how to inject a route into the programmable RIB.

URL: /restconf/config/bgp-rib:application-rib/10.25.1.9/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/bgp-inet:ipv4-routes

Method: POST

Content-Type: application/xml

Request Body:

{
	"ipv4-route": {
		"path-id": "0",
		"prefix": "10.0.0.11/32",
		"attributes": {
			"as-path": "",
			"origin": {
				"value": "igp"
			},
			"local-pref": {
				"pref": "100"
			},
			"ipv4-next-hop": {
				"global": "10.11.1.1"
			}
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
	}
}


Now the injected route appears in Application Peer’s RIBs and in local speaker’s Loc-RIB:

URL: /restconf/operational/bgp-rib:bgp-rib/rib/bgp-example/peer/bgp:%2F%2F10.25.1.9

Method: GET

Response Body:


{
	"peer": {
		"peer-id": "bgp://10.25.1.9",
		"peer-role": "internal",
		"adj-rib-in": {
			"tables": {
				"afi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:ipv4-address-family"
				},
				"safi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:unicast-subsequent-address-family"
				},
				"ipv4-routes": {
					"ipv4-route": {
						"path-id": "0",
						"prefix": "10.0.0.11/32",
						"attributes": {
							"as-path": "",
							"origin": {
								"value": "igp"
							},
							"local-pref": {
								"pref": "100"
							},
							"ipv4-next-hop": {
								"global": "10.11.1.1"
							}
						}
					},
					"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
				},
				"attributes": {
					"uptodate": "false"
				}
			}
		},
		"effective-rib-in": {
			"tables": {
				"afi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:ipv4-address-family"
				},
				"safi": {
					"_xmlns:x": "urn:opendaylight:params:xml:ns:yang:bgp-types",
					"__text": "x:unicast-subsequent-address-family"
				},
				"ipv4-routes": {
					"ipv4-route": {
						"path-id": "0",
						"prefix": "10.0.0.11/32",
						"attributes": {
							"as-path": "",
							"origin": {
								"value": "igp"
							},
							"local-pref": {
								"pref": "100"
							},
							"ipv4-next-hop": {
								"global": "10.11.1.1"
							}
						}
					},
					"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
				},
				"attributes": ""
			}
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-rib"
	}
}

@line 9: Injected route is present in Application Peer’s Adj-RIB-In and Effective-RIB-In.

URL: /restconf/operational/bgp-rib:bgp-rib/rib/bgp-example/loc-rib/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/ipv4-routes

Method: GET

Response Body:

{
	"ipv4-routes": {
		"ipv4-route": [
			{
				"path-id": "0",
				"prefix": "10.0.0.10/32",
				"attributes": {
					"as-path": "",
					"origin": {
						"value": "igp"
					},
					"local-pref": {
						"pref": "100"
					},
					"ipv4-next-hop": {
						"global": "10.11.1.1"
					}
				}
			},
			{
				"path-id": "0",
				"prefix": "10.0.0.10/32",
				"attributes": {
					"as-path": "",
					"origin": {
						"value": "igp"
					},
					"local-pref": {
						"pref": "100"
					},
					"ipv4-next-hop": {
						"global": "10.10.1.1"
					}
				}
			}
		],
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
	}
}


@line 2: The injected route is now present in Loc-RIB along with a route (destination 10.0.0.10/32) advertised by remote peer.

This route is also advertised to the remote peer (192.0.2.1), hence route appears in its Adj-RIB-Out:

URL: /restconf/operational/bgp-rib:bgp-rib/rib/bgp-example/peer/bgp:%2F%2F192.0.2.1/adj-rib-out/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/bgp-inet:ipv4-routes

Method: GET

Response Body:

{
	"ipv4-route": {
		"path-id": "0",
		"prefix": "10.0.0.11/32",
		"attributes": {
			"as-path": "",
			"origin": {
				"value": "igp"
			},
			"local-pref": {
				"pref": "100"
			},
			"ipv4-next-hop": {
				"global": "10.11.1.1"
			}
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
	}
}


The injected route can be modified (i.e. different path attribute):

URL: /restconf/config/bgp-rib:application-rib/10.25.1.9/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/bgp-inet:ipv4-routes/ipv4-route/10.0.0.11%2F32/0

Method: PUT

Content-Type: application/xml

Request Body:

{
	"ipv4-route": {
		"path-id": "0",
		"prefix": "10.0.0.11/32",
		"attributes": {
			"as-path": "",
			"origin": {
				"value": "igp"
			},
			"local-pref": {
				"pref": "50"
			},
			"ipv4-next-hop": {
				"global": "10.11.1.2"
			}
		},
		"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp-inet"
	}
}


The route can be removed from programmable RIB in a following way:

URL: /restconf/config/bgp-rib:application-rib/10.25.1.9/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/bgp-inet:ipv4-routes/ipv4-route/10.0.0.11%2F32/0

Method: DELETE

Also it is possible to remove all routes from a particular table at once:

URL: /restconf/config/bgp-rib:application-rib/10.25.1.9/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/bgp-inet:ipv4-routes/

Method: DELETE

Consequently, route disappears from programmable RIB, Application Peer’s RIBs, Loc-RIB and peer’s Adj-RIB-Out (UPDATE message with prefix withdrawal is send).

Note

Routes stored in programmable RIB are persisted on OpendDaylight shutdown and restored after the re-start.

BGP Protocol Configuration Loader
BGP Protocol Configuration Loader allows the user to define the static initial configuration for a BGP protocol instance. This service will detect the creation of new configuration files following the pattern “protocols-*.xml” under the path “etc/opendaylight/bgpcep”. Once the file is processed, the defined configuration will be available from the configuration Data Store.

Note

If the BGP instance is already present, no update or configuration will be applied.

PATH: etc/opendaylight/bgpcep/protocols-config.xml


{
	"protocols": {
		"protocol": {
			"name": "example-bgp-rib",
			"identifier": {
				"_xmlns:x": "http://openconfig.net/yang/policy-types",
				"__text": "x:BGP"
			},
			"bgp": {
				"global": {
					"config": {
						"router-id": "192.0.2.2",
						"as": "64496"
					},
					"afi-safis": {
						"afi-safi": [
							{
								"afi-safi-name": {
									"_xmlns:x": "http://openconfig.net/yang/bgp-types",
									"__text": "x:IPV4-UNICAST"
								}
							},
							{
								"afi-safi-name": {
									"_xmlns:x": "http://openconfig.net/yang/bgp-types",
									"__text": "x:IPV6-UNICAST"
								}
							},
							{
								"afi-safi-name": {
									"_xmlns:x": "http://openconfig.net/yang/bgp-types",
									"__text": "x:IPV4-LABELLED-UNICAST"
								}
							},
							{
								"afi-safi-name": {
									"_xmlns:x": "http://openconfig.net/yang/bgp-types",
									"__text": "x:IPV6-LABELLED-UNICAST"
								}
							},
							{
								"afi-safi-name": {
									"_xmlns:x": "http://openconfig.net/yang/bgp-types",
									"__text": "x:L3VPN-IPV4-UNICAST"
								}
							},
							{
								"afi-safi-name": {
									"_xmlns:x": "http://openconfig.net/yang/bgp-types",
									"__text": "x:L3VPN-IPV6-UNICAST"
								}
							},
							{
								"afi-safi-name": {
									"_xmlns:x": "http://openconfig.net/yang/bgp-types",
									"__text": "x:L2VPN-EVPN"
								}
							},
							{
								"afi-safi-name": "LINKSTATE"
							},
							{
								"afi-safi-name": "IPV4-FLOW"
							},
							{
								"afi-safi-name": "IPV6-FLOW"
							},
							{
								"afi-safi-name": "IPV4-L3VPN-FLOW"
							},
							{
								"afi-safi-name": "IPV6-L3VPN-FLOW"
							}
						]
					}
				},
				"neighbors": {
					"neighbor": [
						{
							"neighbor-address": "192.0.2.1",
							"config": {
								"peer-type": "INTERNAL",
								"peer-as": "64496"
							},
							"transport": {
								"config": {
									"remote-port": "179",
									"passive-mode": "true"
								}
							},
							"timers": {
								"config": {
									"hold-time": "180",
									"connect-retry": "10"
								}
							},
							"route-reflector": {
								"config": {
									"route-reflector-client": "false"
								}
							},
							"afi-safis": {
								"afi-safi": [
									{
										"afi-safi-name": {
											"_xmlns:x": "http://openconfig.net/yang/bgp-types",
											"__text": "x:IPV4-UNICAST"
										}
									},
									{
										"afi-safi-name": {
											"_xmlns:x": "http://openconfig.net/yang/bgp-types",
											"__text": "x:IPV6-UNICAST"
										}
									},
									{
										"afi-safi-name": {
											"_xmlns:x": "http://openconfig.net/yang/bgp-types",
											"__text": "x:IPV4-LABELLED-UNICAST"
										}
									},
									{
										"afi-safi-name": {
											"_xmlns:x": "http://openconfig.net/yang/bgp-types",
											"__text": "x:IPV6-LABELLED-UNICAST"
										}
									},
									{
										"afi-safi-name": {
											"_xmlns:x": "http://openconfig.net/yang/bgp-types",
											"__text": "x:L3VPN-IPV4-UNICAST"
										}
									},
									{
										"afi-safi-name": {
											"_xmlns:x": "http://openconfig.net/yang/bgp-types",
											"__text": "x:L3VPN-IPV6-UNICAST"
										}
									},
									{
										"afi-safi-name": {
											"_xmlns:x": "http://openconfig.net/yang/bgp-types",
											"__text": "x:L2VPN-EVPN"
										}
									},
									{
										"afi-safi-name": "LINKSTATE"
									},
									{
										"afi-safi-name": "IPV4-FLOW"
									},
									{
										"afi-safi-name": "IPV6-FLOW"
									},
									{
										"afi-safi-name": "IPV4-L3VPN-FLOW"
									},
									{
										"afi-safi-name": "IPV6-L3VPN-FLOW"
									}
								]
							},
							"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
						},
						{
							"neighbor-address": "192.0.2.6",
							"config": {
								"peer-group": "application-peers"
							},
							"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
						}
					],
					"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
				},
				"_xmlns": "urn:opendaylight:params:xml:ns:yang:bgp:openconfig-extensions"
			}
		},
		"_xmlns": "http://openconfig.net/yang/network-instance"
	}
}


BGP Configuration Example¶
BGP provides a feature providing a BGP Protocol and Network Topology configuration file example. Once feature is installed defined configuration will be loaded and setup.

feature:install odl-bgpcep-bgp-config-example


